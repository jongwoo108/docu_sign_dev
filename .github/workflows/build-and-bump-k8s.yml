name: Build -> Push ECR -> PR to k8s repo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# 동일 ref에서 여러 런이 겹쳐도 충돌 최소화
concurrency:
  group: bump-image-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write          # git push/commit
  pull-requests: write     # gh pr create
  # id-token: write        # (OIDC 사용 시 주석 해제)

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: documenso

  # k8s 파일/컨테이너 설정
  K8S_DEPLOYMENT_FILE: k8s/documenso/deployment.yaml
  K8S_CONTAINER_NAME: web

  # 브랜치 접두사
  PR_BRANCH_PREFIX: bump-image-

jobs:
  build-and-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true   # 같은 레포에 push하므로 true

      # --- AWS 로그인(ECR 푸시용) ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # OIDC 사용할 경우 위 두 줄 대신 아래 사용
          # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          # role-session-name: gh-actions
          # aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Define image info
        id: vars
        run: |
          echo "IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # --- Docker Build & Push ---
      - name: Build & Push image
        env:
          IMAGE_URI: ${{ steps.vars.outputs.IMAGE_URI }}
        run: |
          docker build --platform linux/amd64 -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

      # --- 도구 설치 (yq) ---
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      # --- 브랜치명 계산 (SHA + run_id + run_attempt 로 유니크) ---
      - name: Compute branch name
        id: br
        run: |
          echo "NAME=${{ env.PR_BRANCH_PREFIX }}${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      # --- 새 브랜치 생성/초기화 ---
      - name: Create/Reset bump branch from base
        env:
          BASE: main
        run: |
          git fetch origin "$BASE" --depth=1
          git checkout -B "${{ steps.br.outputs.NAME }}" "origin/$BASE"

      # --- k8s Deployment의 image 태그 변경 ---
      - name: Update image in deployment.yaml
        env:
          FILE: ${{ env.K8S_DEPLOYMENT_FILE }}
          CONTAINER: ${{ env.K8S_CONTAINER_NAME }}
          IMAGE_URI: ${{ steps.vars.outputs.IMAGE_URI }}
        run: |
          yq -i '(.spec.template.spec.containers[] | select(.name == env(CONTAINER)) .image) = env(IMAGE_URI)' "$FILE"
          echo "=== Diff ==="
          git --no-pager diff "$FILE" || true

      # --- 커밋 & 푸시 ---
      - name: Commit changes
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ${{ env.K8S_DEPLOYMENT_FILE }}
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore(k8s): bump image to ${{ steps.vars.outputs.IMAGE_URI }}"

      - name: Push branch (safe force)
        run: |
          git push --force-with-lease --set-upstream origin "${{ steps.br.outputs.NAME }}"

      # --- PR 생성 ---
      - name: Open PR (API)
        if: steps.commit.outputs.changed == 'true'  # ← 있다면 유지
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BASE: main
          HEAD: ${{ steps.br.outputs.NAME }}
          TITLE: "chore(k8s): bump image to ${{ steps.vars.outputs.IMAGE_URI }}"
          BODY: "Automated PR from app build."
        run: |
          set -e

          # 1) PR 생성 시도
          RES_CREATE=$(curl -sS -X POST \
            -H "Authorization: token ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${REPO}/pulls" \
            -d "$(jq -nc --arg title "$TITLE" --arg head "$HEAD" --arg base "$BASE" --arg body "$BODY" \
                  '{title:$title, head:$head, base:$base, body:$body}')" )

          # 2) 성공 여부 판단: html_url 존재하면 성공
          PR_URL=$(echo "$RES_CREATE" | jq -r 'if type=="object" and has("html_url") then .html_url else empty end')

          if [ -z "$PR_URL" ]; then
            echo "Create PR failed or already exists. Checking open PRs for this branch..."
            # 3) 이미 열린 PR 있는지 조회 (배열 반환)
            RES_LIST=$(curl -sS \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/pulls?head=$(echo ${REPO} | cut -d'/' -f1):${HEAD}&base=${BASE}&state=open")

            PR_URL=$(echo "$RES_LIST" | jq -r 'if type=="array" and length>0 and .[0]|has("html_url") then .[0].html_url else empty end')
          fi

          if [ -z "$PR_URL" ]; then
            echo "::group::Debug response"
            echo "Create response:"
            echo "$RES_CREATE" | jq .
            echo "List response:"
            echo "${RES_LIST:-null}" | jq .
            echo "::endgroup::"
            echo "::error::PR creation failed and no existing open PR found."
            exit 1
          fi

          echo "PR_URL=$PR_URL"
          echo "✅ Opened PR: $PR_URL"
